name: Android CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

env:
  ANDROID_COMPILE_SDK: 34
  ANDROID_NDK_VERSION: 25.2.9519653
  JAVA_VERSION: 17

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Code Quality Check
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run Kotlin linter
        run: ./gradlew ktlintCheck

      - name: Run Android linter
        run: ./gradlew lintDebug

      - name: Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results
          path: app/build/reports/

  test:
    runs-on: ubuntu-latest
    name: Unit Tests
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run unit tests
        run: ./gradlew testDebugUnitTest

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: app/build/test-results/

  build:
    runs-on: ubuntu-latest
    name: Build APK
    needs: [lint, test]
    strategy:
      matrix:
        variant: [debug, release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install NDK
        run: |
          echo "y" | sdkmanager "ndk;${{ env.ANDROID_NDK_VERSION }}"

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

      - name: Cache NDK
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.ANDROID_SDK_ROOT }}/ndk/${{ env.ANDROID_NDK_VERSION }}
          key: ${{ runner.os }}-ndk-${{ env.ANDROID_NDK_VERSION }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build ${{ matrix.variant }} APK
        run: ./gradlew assemble${{ matrix.variant == 'debug' && 'Debug' || 'Release' }}

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ matrix.variant }}
          path: app/build/outputs/apk/${{ matrix.variant }}/*.apk
          retention-days: 30

  instrumentation-test:
    runs-on: ubuntu-latest
    name: UI Tests
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install NDK
        run: echo "y" | sdkmanager "ndk;${{ env.ANDROID_NDK_VERSION }}"

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ env.ANDROID_COMPILE_SDK }}

      - name: Create AVD
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.ANDROID_COMPILE_SDK }}
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          disable-animations: false
          script: echo "Generated AVD snapshot"

      - name: Run instrumentation tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.ANDROID_COMPILE_SDK }}
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          disable-animations: true
          script: ./gradlew connectedDebugAndroidTest

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: instrumentation-test-results
          path: app/build/reports/androidTests/

  release:
    runs-on: ubuntu-latest
    name: Create Release
    needs: [build, test]
    if: github.event_name == 'release'
    steps:
      - name: Download APKs
        uses: actions/download-artifact@v4
        with:
          name: apk-release

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.apk
          tag_name: ${{ github.event.release.tag_name }}
          name: Release ${{ github.event.release.tag_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notification:
    runs-on: ubuntu-latest
    name: Build Notification
    needs: [build, test, lint]
    if: always()
    steps:
      - name: Notify Success
        if: ${{ needs.build.result == 'success' && needs.test.result == 'success' && needs.lint.result == 'success' }}
        run: |
          echo "✅ Build successful for ${{ github.repository }} on ${{ github.ref }}"
      
      - name: Notify Failure  
        if: ${{ needs.build.result == 'failure' || needs.test.result == 'failure' || needs.lint.result == 'failure' }}
        run: |
          echo "❌ Build failed for ${{ github.repository }} on ${{ github.ref }}"
